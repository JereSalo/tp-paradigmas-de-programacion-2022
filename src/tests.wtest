import wollok.game.*
import configuracion.*
import direcciones.*
import juego.*
import main.*
import niveles.*

describe "Piramide De Maslow" {
	
	test "Si el personaje fuerte interactua con la caja, éste se mantiene en su posición"
	{
		nivel1.reiniciarse()
		personajeFuerte.position(game.at(7, 5))
		personajeFuerte.moverA(derecha)
		assert.that(personajeFuerte.position() == game.at(7,5))
	}
	
	test "Si el personaje se mueve hacia abajo, no puede porque hay una pared"
	{
		game.clear()
		game.addVisual(personajeFuerte)
		personajeFuerte.position(game.at(3, 5))
		const pared = new Pared(position = game.at(3, 4))
		game.addVisual(pared)
		personajeFuerte.moverA(abajo)
		assert.equals(personajeFuerte.position(), game.at(3,5)) 
	}
	
	test "El personaje inteligente no puede mover la caja"
	{
		nivel1.reiniciarse()
		personajeInteligente.position(game.at(5,4))
		const caja = new Caja(posicionInicial = game.at(5, 5))
		game.addVisual(caja)
		assert.throwsException({personajeInteligente.moverA(arriba)})
	}
	 
	test "Si el personaje esta en la misma posicion que la placa esta se activa"
	{
		nivel1.reiniciarse()
		const placa = new Placa(position = game.at(1,3), image = "placaRoja.png", puedePisarse = true)
		game.addVisual(placa)
		placa.configuracionInicial()
		personajeFuerte.moverA(arriba)
		assert.that(placa.activado())//No funciona por cuestión de schedule o tick
	}
	
	test "Si un personaje pisa los pinches pierde una vida"
	{
		nivel1.reiniciarse()
		const pinche = new Pinche()
		pinche.position(game.at(1,3))
		game.addVisual(pinche)
		personajeFuerte.moverA(arriba)
		assert.equals(gestorNiveles.vidas(),2)
	}
	
	test "Si un personaje pisa los superpinches pierde dos vidas"
	{
		nivel1.reiniciarse()
		personajeFuerte.position(game.at(8,4))
		assert.equals(gestorNiveles.vidas(),1)
	}

	test "Si el personaje llega al pancho pasa al siguiente nivel"
	{
		game.clear()
		const pancho = new ObjetoGanador(image = "pancho.png", position = game.at(3,3), puedePisarse = true)
		game.addVisual(pancho)
		personajeInteligente.position(game.at(3,2))
		game.addVisual(personajeInteligente)
		personajeInteligente.moverA(arriba)
		game.schedule(3100, {assert.that(gestorNiveles.nivelActual() == "nivel2")})//No funciona por cuestión de schedule o tick
	}
}
